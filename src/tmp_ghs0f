

    
    enum Temp {
        F(f32), // fahrenheit
        C(f32), // celsius
    }

fn convert_temp(temp: &Temp) -> f32 {  // using  matching expression to do the calculation
    match  temp  {
        &Temp :: F(degrees) => (degrees - 32.0) / 1.8, // expression to convert to F
        &Temp :: C(degrees) => (degrees - 1.8) + 1.8,  // expression to convert to C
    }
}
// this function print out both the submitted and converted degrees.
fn print_temp(temp: &Temp)   {

    match temp {
        &Temp :: F(degrees) => println!("{}F = {}C",degrees, convert_temp(temp)), // converting from F to C
        &Temp :: C(degrees) => println!("{}C = {}F",degrees, convert_temp(temp)), // converting from C to F
    }
}
     // this function is for sample data
fn sample_temp() {
    println!("sample conversion");

    let temps = [Temp :: F(40.0), 
                Temp :: F(50.0),
                Temp :: C(30.0)
    ];

    for temp in temps.iter() {
        print_temp(temp);
    }

}


// user input 


fn get_user

    fn main () {
        println!("Welcome to temperature converter ");
       sample_temp();

    

}

